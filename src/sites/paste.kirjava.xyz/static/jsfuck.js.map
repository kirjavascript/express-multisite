{"version":3,"sources":["webpack:///./app/transforms/jsfuck.js","webpack:///./node_modules/jsfuck/jsfuck.js"],"names":["JSFuck","encode"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AACeA,4GAAM,CAACC,MAAtB,E;;;;;;;;;;;ACDA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,oBAAoB,aAAa;;AAEjC;;AAEA,sBAAsB,wBAAwB;AAC9C,iBAAiB,YAAY,MAAM,2BAA2B;AAC9D,sBAAsB,2BAA2B;;AAEjD;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,iCAAiC,mBAAmB;;AAEpD;AACA;AACA;AACA;;AAEA,oBAAoB,wBAAwB;AAC5C,iBAAiB,UAAU,MAAM,2BAA2B;AAC5D,oBAAoB,2BAA2B;;AAE/C;AACA;;AAEA,iBAAiB,UAAU;AAC3B;AACA;AACA,kBAAkB;AAClB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,iCAAiC,EAAE;AACnC;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,CAAC,EAAE,MAA+B,GAAG,SAAM","file":"jsfuck.js","sourcesContent":["import { JSFuck } from 'jsfuck';\nexport default JSFuck.encode;\n","/*! JSFuck 0.4.0 - http://jsfuck.com */\n\n(function(self){\n\n  var USE_CHAR_CODE = \"USE_CHAR_CODE\";\n\n  var MIN = 32, MAX = 126;\n\n  var SIMPLE = {\n    'false':      '![]',\n    'true':       '!![]',\n    'undefined':  '[][[]]',\n    'NaN':        '+[![]]',\n    'Infinity':   '+(+!+[]+(!+[]+[])[!+[]+!+[]+!+[]]+[+!+[]]+[+[]]+[+[]]+[+[]])' // +\"1e1000\"\n  };\n\n  var CONSTRUCTORS = {\n    'Array':    '[]',\n    'Number':   '(+[])',\n    'String':   '([]+[])',\n    'Boolean':  '(![])',\n    'Function': '[][\"filter\"]',\n    'RegExp':   'Function(\"return/0/\")()'\n  };\n\n  var MAPPING = {\n    'a':   '(false+\"\")[1]',\n    'b':   '(+(11))[\"toString\"](20)',\n    'c':   '([][\"filter\"]+\"\")[3]',\n    'd':   '(undefined+\"\")[2]',\n    'e':   '(true+\"\")[3]',\n    'f':   '(false+\"\")[0]',\n    'g':   '(+false+[false]+String)[20]',\n    'h':   '(+(101))[\"toString\"](21)[1]',\n    'i':   '([false]+undefined)[10]',\n    'j':   '(+(40))[\"toString\"](21)[1]',\n    'k':   '(+(20))[\"toString\"](21)',\n    'l':   '(false+\"\")[2]',\n    'm':   '(Number+\"\")[11]',\n    'n':   '(undefined+\"\")[1]',\n    'o':   '(true+[][\"filter\"])[10]',\n    'p':   '(+(211))[\"toString\"](31)[1]',\n    'q':   '(+(212))[\"toString\"](31)[1]',\n    'r':   '(true+\"\")[1]',\n    's':   '(false+\"\")[3]',\n    't':   '(true+\"\")[0]',\n    'u':   '(undefined+\"\")[0]',\n    'v':   '(+(31))[\"toString\"](32)',\n    'w':   '(+(32))[\"toString\"](33)',\n    'x':   '(+(101))[\"toString\"](34)[1]',\n    'y':   '(NaN+[Infinity])[10]',\n    'z':   '(+(35))[\"toString\"](36)',\n\n    'A':   '(+false+Array)[10]',\n    'B':   '(+false+Boolean)[10]',\n    'C':   'Function(\"return escape\")()(\"<\")[2]',\n    'D':   'Function(\"return escape\")()(\"=\")[2]',\n    'E':   '(RegExp+\"\")[12]',\n    'F':   '(+false+Function)[10]',\n    'G':   '(false+Function(\"return Date\")()())[30]',\n    'H':   USE_CHAR_CODE,\n    'I':   '(Infinity+\"\")[0]',\n    //'J':   USE_CHAR_CODE,\n    'K':   USE_CHAR_CODE,\n    'L':   USE_CHAR_CODE,\n    'M':   '(true+Function(\"return Date\")()())[30]',\n    'N':   '(NaN+\"\")[0]',\n    //'O':   USE_CHAR_CODE,\n    'P':   USE_CHAR_CODE,\n    'Q':   USE_CHAR_CODE,\n    'R':   '(+false+RegExp)[10]',\n    'S':   '(+false+String)[10]',\n    'T':   '(NaN+Function(\"return Date\")()())[30]',\n    'U':   USE_CHAR_CODE,\n    'V':   USE_CHAR_CODE,\n    'W':   USE_CHAR_CODE,\n    'X':   USE_CHAR_CODE,\n    'Y':   USE_CHAR_CODE,\n    'Z':   USE_CHAR_CODE,\n\n    ' ':   '(NaN+[][\"filter\"])[11]',\n    '!':   USE_CHAR_CODE,\n    '\"':   '(\"\")[\"fontcolor\"]()[12]',\n    '#':   USE_CHAR_CODE,\n    '$':   USE_CHAR_CODE,\n    '%':   'Function(\"return escape\")()(\"<\")[0]',\n    '&':   USE_CHAR_CODE,\n    '\\'':  USE_CHAR_CODE,\n    '(':   '(false+[][\"filter\"])[20]',\n    ')':   '(true+[][\"filter\"])[20]',\n    '*':   USE_CHAR_CODE,\n    '+':   '(+(+!+[]+(!+[]+[])[!+[]+!+[]+!+[]]+[+!+[]]+[+[]]+[+[]])+[])[2]',\n    ',':   '[[]][\"concat\"]([[]])+\"\"',\n    '-':   '(+(.+[0000000001])+\"\")[2]',\n    '.':   '(+(+!+[]+[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+[!+[]+!+[]]+[+[]])+[])[+!+[]]',\n    '/':   '(false+[+false])[\"italics\"]()[10]',\n    ':':   '(RegExp()+\"\")[3]',\n    ';':   USE_CHAR_CODE,\n    '<':   '(\"\")[\"italics\"]()[0]',\n    '=':   '(\"\")[\"fontcolor\"]()[11]',\n    '>':   '(\"\")[\"italics\"]()[2]',\n    '?':   '(RegExp()+\"\")[2]',\n    '@':   USE_CHAR_CODE,\n    '[':   '(GLOBAL+\"\")[0]',\n    '\\\\':  USE_CHAR_CODE,\n    ']':   USE_CHAR_CODE,\n    '^':   USE_CHAR_CODE,\n    '_':   USE_CHAR_CODE,\n    '`':   USE_CHAR_CODE,\n    '{':   '(NaN+[][\"filter\"])[21]',\n    '|':   USE_CHAR_CODE,\n    '}':   USE_CHAR_CODE,\n    '~':   USE_CHAR_CODE\n  };\n\n  var GLOBAL = 'Function(\"return this\")()';\n\n  function fillMissingChars(){\n    for (var key in MAPPING){\n      if (MAPPING[key] === USE_CHAR_CODE){\n        MAPPING[key] = 'Function(\"return unescape\")()(\"%\"'+ key.charCodeAt(0).toString(16).replace(/(\\d+)/g, \"+($1)+\\\"\") + '\")';\n      }\n    }\n  }\n\n  function fillMissingDigits(){\n    var output, number, i;\n\n    for (number = 0; number < 10; number++){\n\n      output = \"+[]\";\n\n      if (number > 0){ output = \"+!\" + output; }\n      for (i = 1; i < number; i++){ output = \"+!+[]\" + output; }\n      if (number > 1){ output = output.substr(1); }\n\n      MAPPING[number] = \"[\" + output + \"]\";\n    }\n  }\n\n  function replaceMap(){\n    var character = \"\", value, original, i, key;\n\n    function replace(pattern, replacement){\n      value = value.replace(\n        new RegExp(pattern, \"gi\"),\n        replacement\n      );\n    }\n\n    function digitReplacer(_,x) { return MAPPING[x]; }\n\n    function numberReplacer(_,y) {\n      var values = y.split(\"\");\n      var head = +(values.shift());\n      var output = \"+[]\";\n\n      if (head > 0){ output = \"+!\" + output; }\n      for (i = 1; i < head; i++){ output = \"+!+[]\" + output; }\n      if (head > 1){ output = output.substr(1); }\n\n      return [output].concat(values).join(\"+\").replace(/(\\d)/g, digitReplacer);\n    }\n\n    for (i = MIN; i <= MAX; i++){\n      character = String.fromCharCode(i);\n      value = MAPPING[character];\n      if(!value) {continue;}\n      original = value;\n\n      for (key in CONSTRUCTORS){\n        replace(\"\\\\b\" + key, CONSTRUCTORS[key] + '[\"constructor\"]');\n      }\n\n      for (key in SIMPLE){\n        replace(key, SIMPLE[key]);\n      }\n\n      replace('(\\\\d\\\\d+)', numberReplacer);\n      replace('\\\\((\\\\d)\\\\)', digitReplacer);\n      replace('\\\\[(\\\\d)\\\\]', digitReplacer);\n\n      replace(\"GLOBAL\", GLOBAL);\n      replace('\\\\+\"\"', \"+[]\");\n      replace('\"\"', \"[]+[]\");\n\n      MAPPING[character] = value;\n    }\n  }\n\n  function replaceStrings(){\n    var regEx = /[^\\[\\]\\(\\)\\!\\+]{1}/g,\n      all, value, missing,\n      count = MAX - MIN;\n\n    function findMissing(){\n      var all, value, done = false;\n\n      missing = {};\n\n      for (all in MAPPING){\n\n        value = MAPPING[all];\n\n        if (value.match(regEx)){\n          missing[all] = value;\n          done = true;\n        }\n      }\n\n      return done;\n    }\n\n    function mappingReplacer(a, b) {\n      return b.split(\"\").join(\"+\");\n    }\n\n    function valueReplacer(c) {\n      return missing[c] ? c : MAPPING[c];\n    }\n\n    for (all in MAPPING){\n      MAPPING[all] = MAPPING[all].replace(/\\\"([^\\\"]+)\\\"/gi, mappingReplacer);\n    }\n\n    while (findMissing()){\n      for (all in missing){\n        value = MAPPING[all];\n        value = value.replace(regEx, valueReplacer);\n\n        MAPPING[all] = value;\n        missing[all] = value;\n      }\n\n      if (count-- === 0){\n        console.error(\"Could not compile the following chars:\", missing);\n      }\n    }\n  }\n\n  function encode(input, wrapWithEval){\n    var output = [];\n\n    if (!input){\n      return \"\";\n    }\n\n    var r = \"\";\n    for (var i in SIMPLE) {\n      r += i + \"|\";\n    }\n    r+=\".\";\n\n    input.replace(new RegExp(r, 'g'), function(c) {\n      var replacement = SIMPLE[c];\n      if (replacement) {\n        output.push(\"[\" + replacement + \"]+[]\");\n      } else {\n        replacement = MAPPING[c];\n        if (replacement){\n          output.push(replacement);\n        } else {\n          if (c === \"J\") {\n            replacement =\n              \"([][\" + encode(\"filter\") + \"]\" +\n              \"[\" + encode(\"constructor\") + \"]\" +\n              \"(\" + encode(\"return new Date(200000000)\") + \")()+[])[!+[]+!+[]+!+[]+!+[]]\";\n\n            output.push(replacement);\n            MAPPING[c] = replacement;\n          } else if (c === \"O\") {\n            replacement =\n              \"([][\" + encode(\"filter\") + \"]\" +\n              \"[\" + encode(\"constructor\") + \"]\" +\n              \"(\" + encode(\"return new Date(24000000000)\") + \")()+[])[!+[]+!+[]+!+[]+!+[]]\";\n\n            output.push(replacement);\n            MAPPING[c] = replacement;\n          } else {\n            replacement =\n              \"([]+[])[\" + encode(\"constructor\") + \"]\" +\n              \"[\" + encode(\"fromCharCode\") + \"]\" +\n              \"(\" + encode(c.charCodeAt(0) + \"\") + \")\";\n\n            output.push(replacement);\n            MAPPING[c] = replacement;\n          }\n        }\n      }\n    });\n\n    output = output.join(\"+\");\n\n    if (/^\\d$/.test(input)){\n      output += \"+[]\";\n    }\n\n    if (wrapWithEval){\n      output = \"[][\" + encode(\"filter\") + \"]\" +\n        \"[\" + encode(\"constructor\") + \"]\" +\n        \"(\" + output + \")()\";\n    }\n\n    return output;\n  }\n\n  fillMissingDigits();\n  fillMissingChars();\n  replaceMap();\n  replaceStrings();\n\n  self.JSFuck = {\n    encode: encode\n  };\n})(typeof(exports) === \"undefined\" ? window : exports);\n"],"sourceRoot":""}